{"version":3,"sources":["contexts/ShowContext.js","components/Navbar.js","components/ShowDetails.js","components/ShowList.js","components/NewShowForm.js","App.js","serviceWorker.js","index.js"],"names":["ShowContext","createContext","ShowContextProvider","props","localData","localStorage","getItem","state","JSON","parse","useState","shows","setShows","useEffect","setItem","stringify","Provider","value","addShow","title","id","uuid","removeShow","filter","show","children","Navbar","useContext","length","ShowDetails","onClick","ShowList","className","map","key","NewShowForm","setTitle","onSubmit","e","preventDefault","type","required","placeholder","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6MAGaA,EAAcC,0BAkBZC,EAhBa,SAACC,GAC5B,IAAMC,EAAYC,aAAaC,QAAQ,SACjCC,EAAQH,EAAYI,KAAKC,MAAML,GAAa,GAFZ,EAGVM,mBAASH,GAHC,mBAG9BI,EAH8B,KAGvBC,EAHuB,KAKtCC,oBAAU,WACTR,aAAaS,QAAQ,QAASN,KAAKO,UAAUJ,GAAQ,CAAEA,MAOxD,OAAO,kBAACX,EAAYgB,SAAb,CAAsBC,MAAO,CAAEN,QAAOO,QAJ7B,SAACC,GAAD,OAAWP,EAAS,GAAD,mBAAMD,GAAN,CAAa,CAAEQ,QAAOC,GAAIC,WAIPC,WAFnC,SAACF,GAAD,OAAQR,EAASD,EAAMY,OAAO,SAACC,GAAD,OAAUA,EAAKJ,KAAOA,QAEFjB,EAAMsB,WCL7DC,EAVA,WAAO,IACbf,EAAUgB,qBAAW3B,GAArBW,MACR,OACC,6BACC,wCACA,2BAAIA,EAAMiB,OAAV,uBCAYC,EALK,SAAC,GAAc,IAAZL,EAAW,EAAXA,KACdF,EAAeK,qBAAW3B,GAA1BsB,WACR,OAAO,wBAAIQ,QAAS,kBAAMR,EAAWE,EAAKJ,MAAMI,EAAKL,QCUvCY,EAXE,WAAO,IACfpB,EAAUgB,qBAAW3B,GAArBW,MACR,OAAOA,EAAMiB,OACZ,yBAAKI,UAAU,aACd,4BAAKrB,EAAMsB,IAAI,SAACT,GAAD,OAAU,kBAAC,EAAD,CAAaA,KAAMA,EAAMU,IAAKV,EAAKJ,SAG7D,yBAAKY,UAAU,SAAf,0BCeaG,EAvBK,WAAO,IAClBjB,EAAYS,qBAAW3B,GAAvBkB,QADiB,EAEGR,mBAAS,IAFZ,mBAEjBS,EAFiB,KAEViB,EAFU,KASzB,OACC,0BAAMC,SANc,SAACC,GACrBA,EAAEC,iBACFrB,EAAQC,GACRiB,EAAS,MAIR,2BACCI,KAAK,OACLvB,MAAOE,EACPsB,UAAQ,EACRC,YAAY,WACZC,SAAU,SAACL,GAAD,OAAOF,EAASE,EAAEM,OAAO3B,UAEpC,2BAAOuB,KAAK,SAASvB,MAAM,eCHf4B,EAZH,WACX,OACC,yBAAKb,UAAU,OACd,kBAAC,EAAD,KACC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAgBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.56769d43.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport uuid from 'uuid/v1';\n\nexport const ShowContext = createContext();\n\nconst ShowContextProvider = (props) => {\n\tconst localData = localStorage.getItem('shows');\n\tconst state = localData ? JSON.parse(localData) : [];\n\tconst [ shows, setShows ] = useState(state);\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem('shows', JSON.stringify(shows), [ shows ]);\n\t});\n\n\tconst addShow = (title) => setShows([ ...shows, { title, id: uuid() } ]);\n\n\tconst removeShow = (id) => setShows(shows.filter((show) => show.id !== id));\n\n\treturn <ShowContext.Provider value={{ shows, addShow, removeShow }}>{props.children}</ShowContext.Provider>;\n};\n\nexport default ShowContextProvider;\n","import React, { useContext } from 'react';\nimport { ShowContext } from '../contexts/ShowContext';\n\nconst Navbar = () => {\n\tconst { shows } = useContext(ShowContext);\n\treturn (\n\t\t<nav>\n\t\t\t<h1>To Watch</h1>\n\t\t\t<p>{shows.length} more shows to go</p>\n\t\t</nav>\n\t);\n};\n\nexport default Navbar;\n","import React, { useContext } from 'react';\nimport { ShowContext } from '../contexts/ShowContext';\n\nconst ShowDetails = ({ show }) => {\n\tconst { removeShow } = useContext(ShowContext);\n\treturn <li onClick={() => removeShow(show.id)}>{show.title}</li>;\n};\n\nexport default ShowDetails;\n","import React, { useContext } from 'react';\nimport { ShowContext } from '../contexts/ShowContext';\nimport ShowDetails from '../components/ShowDetails';\n\nconst ShowList = () => {\n\tconst { shows } = useContext(ShowContext);\n\treturn shows.length ? (\n\t\t<div className=\"book-list\">\n\t\t\t<ul>{shows.map((show) => <ShowDetails show={show} key={show.id} />)}</ul>\n\t\t</div>\n\t) : (\n\t\t<div className=\"empty\">No new shows to watch</div>\n\t);\n};\n\nexport default ShowList;\n","import React, { useState, useContext } from 'react';\nimport { ShowContext } from '../contexts/ShowContext';\n\nconst NewShowForm = () => {\n\tconst { addShow } = useContext(ShowContext);\n\tconst [ title, setTitle ] = useState('');\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\taddShow(title);\n\t\tsetTitle('');\n\t};\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={title}\n\t\t\t\trequired\n\t\t\t\tplaceholder=\"New Show\"\n\t\t\t\tonChange={(e) => setTitle(e.target.value)}\n\t\t\t/>\n\t\t\t<input type=\"submit\" value=\"Add Show\" />\n\t\t</form>\n\t);\n};\n\nexport default NewShowForm;\n","import React from 'react';\nimport ShowContextProvider from './contexts/ShowContext';\nimport Navbar from './components/Navbar';\nimport ShowList from './components/ShowList';\nimport NewShowForm from './components/NewShowForm';\n\nconst App = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ShowContextProvider>\n\t\t\t\t<Navbar />\n\t\t\t\t<ShowList />\n\t\t\t\t<NewShowForm />\n\t\t\t</ShowContextProvider>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}